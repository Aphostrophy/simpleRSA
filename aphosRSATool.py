#Library for computing RSA with known (p-1),(q-1),n,e,c

#GCD , extended, multiplicative inverse
def gcd(a, b):
  assert a >= 0 and b >= 0 and a + b > 0

  while a > 0 and b > 0:
    if a >= b:
      a = a % b
    else:
      b = b % a
  return max(a, b)
  
def extended_gcd(a, b):
  assert a >= b and b >= 0 and a + b > 0

  if b == 0:
    d, x, y = a, 1, 0
  else:
    (d, p, q) = extended_gcd(b, a % b)
    x = q
    y = p - q * (a // b)

  assert a % d == 0 and b % d == 0
  assert d == a * x + b * y
  return (d, x, y)

#Solve ax = b (mod n)
def divide(a, b, n):
  assert n > 1 and a > 0 and gcd(a, n) == 1
  
  (d, x, y) = extended_gcd(n, a) #a becomes b locally and n becomes a locally
  
  while y<0:
    y += n
    
  res = b*y
  while res>= n:
    res -= n
  
  # return the number x s.t. x = b / a (mod n) and 0 <= x <= n-1.
  return res

#Solve b^e mod m
def FastModularExponentiation(b, e, m):
    if e==1:
        return b
    if e==0:
        return 1
    c = b % m
    k =0
    while 2**(k+1)<=e:
        c = c**2 % m
        k+=1
    e = e - (2**k)
    return (c * FastModularExponentiation(b, e, m)) % m

def mDecoder(m):
    print(bytearray.fromhex(format(0x4354467b636c34737331635f7273345f76756c4e7d,"x")).decode())

#EXAMPLE
n = 2140324650240744961264423072839333563008614715144755017797754920881418023447140136643345519095804679610992851872470914587687396261921557363047454770520805119056493106687691590019759405693457452230589325976697471681738069364894699871578494975937497937
e = 65537
c = 1122805923256494755772914176699103465574782471894633224616026322892443033532304489954341026047768936619289514946100330326904845107024417264158367149221366051136440923140780140000465030367058600995545185226728398064680497526310122051402210741839687089

mDecoder(FastModularExponentiation(1122805923256494755772914176699103465574782471894633224616026322892443033532304489954341026047768936619289514946100330326904845107024417264158367149221366051136440923140780140000465030367058600995545185226728398064680497526310122051402210741839687089,divide(65537,1,33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062710*64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853366),2140324650240744961264423072839333563008614715144755017797754920881418023447140136643345519095804679610992851872470914587687396261921557363047454770520805119056493106687691590019759405693457452230589325976697471681738069364894699871578494975937497937))
